/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TipsResponseMsg'
 * message type.
 */

package MsgClass;

public class TipsResponseMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 17;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 11;

    /** Create a new TipsResponseMsg of size 17. */
    public TipsResponseMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TipsResponseMsg of the given data_length. */
    public TipsResponseMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TipsResponseMsg with the given data_length
     * and base offset.
     */
    public TipsResponseMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TipsResponseMsg using the given byte array
     * as backing store.
     */
    public TipsResponseMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TipsResponseMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TipsResponseMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TipsResponseMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TipsResponseMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TipsResponseMsg embedded in the given message
     * at the given base offset.
     */
    public TipsResponseMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TipsResponseMsg embedded in the given message
     * at the given base offset and length.
     */
    public TipsResponseMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TipsResponseMsg> \n";
      try {
        s += "  [tipHash_1=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_tipHash_1(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tipHash_2=";
        for (int i = 0; i < 8; i++) {
          s += "0x"+Long.toHexString(getElement_tipHash_2(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dif=0x"+Long.toHexString(get_dif())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tipHash_1
    //   Field type: short[], unsigned
    //   Offset (bits): 0
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tipHash_1' is signed (false).
     */
    public static boolean isSigned_tipHash_1() {
        return false;
    }

    /**
     * Return whether the field 'tipHash_1' is an array (true).
     */
    public static boolean isArray_tipHash_1() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'tipHash_1'
     */
    public static int offset_tipHash_1(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tipHash_1'
     */
    public static int offsetBits_tipHash_1(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'tipHash_1' as a short[]
     */
    public short[] get_tipHash_1() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_tipHash_1(0); index0++) {
            tmp[index0] = getElement_tipHash_1(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'tipHash_1' from the given short[]
     */
    public void set_tipHash_1(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_tipHash_1(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'tipHash_1'
     */
    public short getElement_tipHash_1(int index1) {
        return (short)getUIntBEElement(offsetBits_tipHash_1(index1), 8);
    }

    /**
     * Set an element of the array 'tipHash_1'
     */
    public void setElement_tipHash_1(int index1, short value) {
        setUIntBEElement(offsetBits_tipHash_1(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'tipHash_1'
     */
    public static int totalSize_tipHash_1() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'tipHash_1'
     */
    public static int totalSizeBits_tipHash_1() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'tipHash_1'
     */
    public static int elementSize_tipHash_1() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'tipHash_1'
     */
    public static int elementSizeBits_tipHash_1() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'tipHash_1'
     */
    public static int numDimensions_tipHash_1() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'tipHash_1'
     */
    public static int numElements_tipHash_1() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'tipHash_1'
     * for the given dimension.
     */
    public static int numElements_tipHash_1(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'tipHash_1' with a String
     */
    public void setString_tipHash_1(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_tipHash_1(i, (short)s.charAt(i));
         }
         setElement_tipHash_1(i, (short)0); //null terminate
    }

    /**
     * Read the array 'tipHash_1' as a String
     */
    public String getString_tipHash_1() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_tipHash_1(i) == (char)0) break;
             carr[i] = (char)getElement_tipHash_1(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tipHash_2
    //   Field type: short[], unsigned
    //   Offset (bits): 64
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tipHash_2' is signed (false).
     */
    public static boolean isSigned_tipHash_2() {
        return false;
    }

    /**
     * Return whether the field 'tipHash_2' is an array (true).
     */
    public static boolean isArray_tipHash_2() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'tipHash_2'
     */
    public static int offset_tipHash_2(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tipHash_2'
     */
    public static int offsetBits_tipHash_2(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 8) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'tipHash_2' as a short[]
     */
    public short[] get_tipHash_2() {
        short[] tmp = new short[8];
        for (int index0 = 0; index0 < numElements_tipHash_2(0); index0++) {
            tmp[index0] = getElement_tipHash_2(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'tipHash_2' from the given short[]
     */
    public void set_tipHash_2(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_tipHash_2(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'tipHash_2'
     */
    public short getElement_tipHash_2(int index1) {
        return (short)getUIntBEElement(offsetBits_tipHash_2(index1), 8);
    }

    /**
     * Set an element of the array 'tipHash_2'
     */
    public void setElement_tipHash_2(int index1, short value) {
        setUIntBEElement(offsetBits_tipHash_2(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'tipHash_2'
     */
    public static int totalSize_tipHash_2() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'tipHash_2'
     */
    public static int totalSizeBits_tipHash_2() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'tipHash_2'
     */
    public static int elementSize_tipHash_2() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'tipHash_2'
     */
    public static int elementSizeBits_tipHash_2() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'tipHash_2'
     */
    public static int numDimensions_tipHash_2() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'tipHash_2'
     */
    public static int numElements_tipHash_2() {
        return 8;
    }

    /**
     * Return the number of elements in the array 'tipHash_2'
     * for the given dimension.
     */
    public static int numElements_tipHash_2(int dimension) {
      int array_dims[] = { 8,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'tipHash_2' with a String
     */
    public void setString_tipHash_2(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_tipHash_2(i, (short)s.charAt(i));
         }
         setElement_tipHash_2(i, (short)0); //null terminate
    }

    /**
     * Read the array 'tipHash_2' as a String
     */
    public String getString_tipHash_2() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,8)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_tipHash_2(i) == (char)0) break;
             carr[i] = (char)getElement_tipHash_2(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dif
    //   Field type: short, unsigned
    //   Offset (bits): 128
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dif' is signed (false).
     */
    public static boolean isSigned_dif() {
        return false;
    }

    /**
     * Return whether the field 'dif' is an array (false).
     */
    public static boolean isArray_dif() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dif'
     */
    public static int offset_dif() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dif'
     */
    public static int offsetBits_dif() {
        return 128;
    }

    /**
     * Return the value (as a short) of the field 'dif'
     */
    public short get_dif() {
        return (short)getUIntBEElement(offsetBits_dif(), 8);
    }

    /**
     * Set the value of the field 'dif'
     */
    public void set_dif(short value) {
        setUIntBEElement(offsetBits_dif(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'dif'
     */
    public static int size_dif() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dif'
     */
    public static int sizeBits_dif() {
        return 8;
    }

}
